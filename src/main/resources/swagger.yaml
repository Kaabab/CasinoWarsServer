openapi: '3.0.0'
info:
  description: "This is a server implementation of Poker wars"
  version: "1.0.0"
  title: "Poker wars sample implementation"
  contact:
    email: "kaabab@gmail.com"
tags:
  - name: "Game"
    description: "Public APIs for casino wars game logic"
  - name: "Player"
    description: "Operations about player"
paths:
  /game/{gameid}/bet:
    post:
      tags:
        - "Game"
      summary: "Make a new bet on the given game id"
      operationId: "requestBet"
      parameters:
        - name: "gameid"
          in: "path"
          description: "The game session id to place the bet into"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Game definition"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BetRequest"
      responses:
        404:
          description: "Game not found"
        409:
          description: "Invalid bet"
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BetResponse"
  /game:
    post:
      tags:
        - "Game"
      summary: "Create a new game session"
      description: "Creates a new game session"
      operationId: "createGame"
      requestBody:
        description: "Game creation request body"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameCreationRequest"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "User not found"
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSession"
  /player/{playerId}:
    get:
      tags:
        - "Player"
      summary: "Find player by ID"
      description: "Returns a player by its id"
      operationId: "getPlayerById"
      parameters:
        - name: "playerId"
          in: "path"
          description: "ID of player to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Id not found"
    put:
      tags:
        - "Player"
      summary: "Update player"
      description: "Update player tokens"
      operationId: "updatePlayerToken"
      parameters:
        - name: "playerId"
          in: "path"
          description: "ID of player to return"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Player update request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerUpdateRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Id not found"
  /player:
    post:
      tags:
        - "Player"
      summary: "Create new player"
      description: "Create a new player"
      operationId: "createPlayer"
      requestBody:
        description: "Player creation request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerCreationRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "409":
          description: "Name already exists"
components:
  schemas:
    GameCreationRequest:
      type: object
      properties:
        playerid:
          type: string
          format: uuid
    GameSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
    BetRequest:
      type: object
      properties:
        bet:
          type: integer
          format: int32
          minimum: 0
        tieBet:
          type: integer
          format: int32
          minimum: 0
        playerId:
          type: string
          format: uuid
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int32
        value:
          type: integer
          format: int32
        name:
          type: string
    BetResponse:
      type: object
      properties:
        playerCard:
          $ref: "#/components/schemas/Card"
        casinoCard:
          $ref: "#/components/schemas/Card"
        result:
          $ref: "#/components/schemas/BetResult"
        tokenValue:
          type: integer
          format: int32
    BetResult:
      type: string
      enum:
        - win
        - war
        - surrender
        - loss
        - tiewin
    PlayerCreationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 24
    PlayerUpdateRequest:
      type: object
      properties:
        tokenCount:
          type: integer
          format: int32
          minimum: 0
    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 24
        tokenCount:
          type: integer
          format: int32
          minimum: 0
